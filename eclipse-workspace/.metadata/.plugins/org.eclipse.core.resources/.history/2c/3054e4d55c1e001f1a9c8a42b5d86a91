#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>

// dies ist, was im Child-Pr. laufen soll
int doChild(){
		int i =0;
		int richtung = 1;
		void sig_handler_child(int signo) {
			if (signo == SIGUSR1) {
					printf("received SIGUSR1\n");
					i = 0;
				}
				else if (signo == SIGINT){
					printf("received SIGINT\n");
					i = i * i;
				} else if (signo == SIGKILL)
					printf("received SIGKILL\n");
				else if (signo == SIGSTOP)
					printf("received SIGSTOP\n");
				else if(signo == SIGUSR2)
				{
					printf("received SIGUSR2\n");
					if(richtung == 1)
					{
						richtung = -1;
					}
					else
					{
						richtung = 1;
					}

				}
		}
		while (richtung == 1) {
			printf("\tChild: i= %d\n",i);
			i += 1;
			sleep(1);
		}
		while (richtung == -1) {
			printf("\tChild: i= %d\n",i);
			i = i - 1;
			sleep(1);
		}
}

// dies ist, was im Parent-Pr. laufen soll
int doParent(pid_t child_pid){
	int i = 0;
		while (1) {
			printf("Parent: i= %d\n",i);
			i += 2;
			if(i == 20)
			{
				kill(child_pid,SIGUSR2);
			}
			if(i == 30)
			{
				kill(child_pid,SIGUSR1);
			}
			if(signal())
			sleep(1);
		}
}

int main (void) {
   pid_t pid;			// hier wird die Prozess-ID abgelegt

   // jetzt wollen wir mit fork() einen Child-Prozess erzeugen
   // und das Ergebnis auswerten
   switch (pid = fork ()) {
   case -1:
      printf ("Fehler bei fork()\n");
      break;
   case 0:
      doChild();
      break;
   default:
	  sleep (1);   /* Kurze Pause */
      doParent(pid);
      break;
   }
   return EXIT_SUCCESS;
}
